@page "/"
@using System.Net.Http
@using Domain.Entities
@using MudBlazor
@using System.Net.Http.Json
@inject HttpClient Http
@*<input @bind="newItemName" placeholder="New Todo Item" />*@


@*<h3>Todays Schedule (Mockup)</h3>
    <hr />*@

@*@foreach (var item in timeSlots)
    {
    <tr class="">
        <td>Booker Id: @item.BookerId</td>
        <td>Timeslot: @item.TimeSlotStart -- @item.TimeSlotEnd</td>
        <td> Title: @item.Title</td>
    </tr>
    }*@

@if (hasItems == 0)
{
    <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined">Vacant slots all day.</MudAlert>
}

<MudTable Items="@timeSlots" Dense="true" Hover="true" Bordered="true" Striped="true" @bind-SelectedItem="selectedItem">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Schedule</MudText>
        <MudToolBarSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Start</MudTh>
        <MudTh>End</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Booker</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.ID</MudTd>
        <MudTd DataLabel="Start">@context.TimeSlotStart</MudTd>
        <MudTd DataLabel="End">@context.TimeSlotEnd</MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Vacant">@context.BookerId</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
<div class="d-flex flex-wrap mt-4">

    <MudToolBarSpacer />
    <MudText Inline="true" Class="align-self-center" Style="min-width:200px;">Selected: @selectedItem?.Title</MudText>
</div>

<hr />

<MudGrid>
    <MudItem xs="12" sm="6" md="3">
        <MudTextField @bind-Value="newItemTitle" Label="Add Title" Variant="Variant.Outlined" Margin="Margin.Dense" Class="d-flex align-center justify-center mud-width-full py-8" />
    </MudItem>
    <MudItem xs="12" sm="3" md="3" Class="d-flex align-center justify-center mud-width-full py-8">
        <MudButton Variant="Variant.Filled" @onclick="@AddTimeSlot">Add</MudButton>
    </MudItem>
</MudGrid>


@code {

    private string newItemTitle;

    //private List<Product> products = new();
    //private List<TimeSlot> timeSlots = new();

    //private IEnumerable<TimeSlot> timeSlots = new List<TimeSlot>();
    private IList<TimeSlot> timeSlots = new List<TimeSlot>();


    private string searchString = "";
    private TimeSlot selectedItem = null;
    private HashSet<TimeSlot> selectedItems = new HashSet<TimeSlot>();

    private bool FilterFunc(TimeSlot timeSlot)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (timeSlot.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    //Read TimeSlots from Db
    protected override async Task OnInitializedAsync()
    {

        await RefreshDb();
    }

    private async Task AddTimeSlot()
    {
        var addTimeSlot = new TimeSlot { TimeSlotStart = DateTime.Now, TimeSlotEnd = DateTime.Now.AddMinutes(15), Title = newItemTitle, IsVacant = false, BookerId = 999, CreatedUTC = DateTime.UtcNow };
        await Http.PostAsJsonAsync("https://localhost:44315/api/v1/TimeSlot", addTimeSlot);

        //Testing localhost server IIS
        //var addTimeSlot = new TimeSlot { TimeSlotStart = DateTime.Now, TimeSlotEnd = DateTime.Now.AddMinutes(15), Title = newItemTitle, IsVacant = false, BookerId = 1, CreatedUTC = DateTime.Now };
        //await Http.PostAsJsonAsync("https://localhost:81/api/v1/TimeSlot", addTimeSlot);

        newItemTitle = "";

        await RefreshDb();
    }

    [Parameter]
    public int hasItems { get; set; }

    private async Task RefreshDb()
    {
        timeSlots = await Http.GetFromJsonAsync<List<TimeSlot>>("https://localhost:44315/api/v1/TimeSlot/GetAllTimeSlotsByDate/2021-06-15");
        hasItems = timeSlots.Count();

        await InitDailySchedule();

        // Testing localhost server IIS
        //timeSlots = await Http.GetFromJsonAsync<List<TimeSlot>>("https://localhost:81/api/v1/TimeSlot");
    }

    // Init empty daily schedule
    // rewrite to check Db for IsVacant = false
    private async Task InitDailySchedule()
    {
        if (hasItems == 0)
        {
            TimeSpan duration = new TimeSpan(0, 0, 15, 0);
            DateTime initDate = new DateTime(DateTime.UtcNow.Year, DateTime.UtcNow.Month, DateTime.UtcNow.Day, 6, 0, 0);

            for (int i = 0; i < 60; i++)
            {
                var timeSlot = new TimeSlot();
                timeSlot.ID = Guid.NewGuid();
                timeSlot.TimeSlotStart = initDate;
                timeSlot.TimeSlotEnd = timeSlot.TimeSlotStart.Add(duration);
                timeSlot.Title = "Vacant";
                timeSlot.IsVacant = true;
                timeSlot.CreatedUTC = DateTime.UtcNow;

                //timeSlots.Add(timeSlot);

                await Http.PostAsJsonAsync("https://localhost:44315/api/v1/TimeSlot", timeSlot);

                initDate = initDate.Add(duration);
            }
        }

        await RefreshDb();
    }

    private void InitVacantTimeslots()
    {
        if (hasItems == 0)
        {
            TimeSpan duration = new TimeSpan(0, 0, 15, 0);
            DateTime initDate = new DateTime(DateTime.UtcNow.Year, DateTime.UtcNow.Month, DateTime.UtcNow.Day, 6, 0, 0);

            foreach (var item in timeSlots)
            {
                if (item.TimeSlotStart > initDate && item.TimeSlotEnd < initDate.AddMinutes(15))
                {

                }
                var timeSlot = new TimeSlot();
                timeSlot.ID = Guid.NewGuid();
                timeSlot.TimeSlotStart = initDate;
                timeSlot.TimeSlotEnd = timeSlot.TimeSlotStart.Add(duration);
                timeSlot.Title = "Vacant";
                timeSlot.IsVacant = true;
                timeSlots.Add(timeSlot);

                initDate = initDate.Add(duration);

            }
        }
    }
}