@page "/"
@page "/{ThisRoomId:guid}"

@using Application.Shared.DTO
@using Domain.Entities
@using System.Security.Claims
@using System.Text.Json
@using System.Text.Json.Serialization
@using Domain.Interfaces
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Logging

@inject NavigationManager NavigationManager
@inject ILogger<Index> Logger
@inject HttpClient _http

@attribute [Authorize]


<h1>RoomId : @ThisRoomId</h1>

@*<AuthorizeView Roles="Administrator">
        <Authorized>
            The user @context.User.FindFirst(ClaimTypes.Name)?.Value is authorized as: @context.User.FindFirst(ClaimTypes.Role)?.Value
        </Authorized>
        <NotAuthorized>
            The User is not authorized
        </NotAuthorized>
    </AuthorizeView>*@
<hr />
<h2>HasItems (From present time and forward): @HasItems</h2>


@if (FirstVacantSlot != null)
{
    <MudButton Variant="Variant.Filled" Color="Color.Default" @onclick="@(e => UpdateTimeSlot(FirstVacantSlot, false, "InstaBooked", InstaBookerGuid))">InstaBook&trade; @FirstVacantSlot.TimeSlotStart.ToShortDateString() @FirstVacantSlot.TimeSlotStart.ToLocalTime().ToShortTimeString() - @FirstVacantSlot.TimeSlotEnd.ToLocalTime().ToShortTimeString()</MudButton>
}


@if (AnyVacantSlot < 0)
{
    <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined">Vacant slots all day.</MudAlert>
}

<MudTable Items="@_timeSlots" Dense="true" Hover="true" Bordered="true" Striped="true" @bind-SelectedItem="_selectedItem" RowsPerPage="12">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Schedule for @_room.Name</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Start</MudTh>
        <MudTh>End</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Booker</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.ID</MudTd>
        <MudTd DataLabel="Start">@context.TimeSlotStart.ToLocalTime().ToShortTimeString()</MudTd>
        <MudTd DataLabel="End">@context.TimeSlotEnd.ToLocalTime().ToShortTimeString()</MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Booker">@context.BookerId</MudTd>   
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 12, 24, 36, 48, 60 }" />
    </PagerContent>
</MudTable>
<div class="d-flex flex-wrap mt-4">

    <MudSpacer />
    <MudText Inline="true" Class="align-self-center" Style="min-width:200px;">Selected: @_selectedItem?.TimeSlotStart.ToLocalTime().ToShortTimeString() - @_selectedItem?.TimeSlotEnd.ToLocalTime().ToShortTimeString() : @_selectedItem?.Title</MudText>
    <MudSpacer />

    </div>

<hr />

@*<MudGrid>
        <MudItem xs="12" sm="6" md="3">
            <MudTextField @bind-Value="newItemTitle" Label="Add Title" Variant="Variant.Outlined" Margin="Margin.Dense" Class="d-flex align-center justify-center mud-width-full py-8" />
        </MudItem>
        <MudItem xs="12" sm="3" md="3" Class="d-flex align-center justify-center mud-width-full py-8">
            <MudButton Variant="Variant.Filled" @onclick="@AddTimeSlot">Add</MudButton>
        </MudItem>
    </MudGrid>*@


@code {

    //temp room set
    [Parameter] public Guid InstaBookerGuid { get; set; } = Guid.Parse("99999999-9999-9999-9999-999999999999");

    private Room _room = new();
    private List<TimeSlot> _timeSlots = new List<TimeSlot>();
    //private IList<Booker> _booker = new List<Booker>();

    [Parameter] public Guid ThisRoomId { get; set; }
    [Parameter] public int? HasItems { get; set; }
    [Parameter] public TimeSlot FirstVacantSlot { get; set; }
    [Parameter] public int AnyVacantSlot { get; set; }

    private string _searchString = "";
    private TimeSlot _selectedItem = null;
    private HashSet<TimeSlot> _selectedItems = new HashSet<TimeSlot>();

    public DateTime _dtToday = DateTime.UtcNow;

    //private bool FilterFunc(ITimeSlot slot)
    //{
    //    if (string.IsNullOrWhiteSpace(_searchString))
    //        return true;

    //    if (slot.Title.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
    //        return true;

    //    return false;
    //}

    //Read TimeSlots from Db at start
    protected override async Task OnInitializedAsync()
    {
        // TODO 1. Check if room exists
        // TODO 2.a. if room exists check for timeslots
        // TODO      2.a.1 if timeslots exists read those to list
        // TODO      2.a.2 if timeslots doesn't exist create daily schedule
        // TODO 2.b if room doesn't exists create room

        await RefreshDb();

        // TODO Change navigation order; Login/Admin page/Room admin/Choose Room/Display Room-TimeSlots
        if (_room is null)
        {
            //await InitRoom();
            GotoRoom();
        }
        //else if (HasItems == 0)             // Create empty Timeslots if none for the day
        //{
        //    await InitDailySchedule();
        //}

        //TODO Redirect to Rooms page to choose room
    }

    private async Task RefreshDb()
    {
        var test = await _http.GetStringAsync("https://localhost:44315/api/v1/Room/GetById/" + ThisRoomId);

        //Get current room
        _room = await _http.GetFromJsonAsync<Room>("https://localhost:44315/api/v1/Room/GetById/" + ThisRoomId);

    #region CheckIfTimeSlotsExists
        if (_room?.TimeSlots != null)
        {
            HasItems = _timeSlots.Count;
        }
        
        _timeSlots = _room.TimeSlots;

        // TODO Fix check for timeslots in db
        if (_timeSlots != null) HasItems = _timeSlots.Count; // Add check for isVacant = null, to display "no scheduled meetings all day"
        else { await InitDailySchedule(); }

    #endregion

    // Check for first vacant timeslot for the day
        FirstVacantSlot = _timeSlots
        .Where(f => f.TimeSlotStart > _dtToday)
        .FirstOrDefault(f => f.IsVacant);

        //Check if there is any vacant timeslots for the day
        AnyVacantSlot = _timeSlots.Count(f => f.IsVacant);

        // Get Bookers List
        //_booker = await _http.GetFromJsonAsync<List<Booker>>("https://localhost:44315/api/v1/Booker/");

        //await ShowRoomAndTimeSlots();
    }

    //Add check if timeSlot.isVacant = true else message to user
    private async Task UpdateTimeSlot(TimeSlot firstVacantSlot, bool notVacantSlot, string title, Guid bookerId)
    {
        var timeUpdateTimeSlot = firstVacantSlot;
        timeUpdateTimeSlot.IsVacant = notVacantSlot;
        timeUpdateTimeSlot.Title = title;
        timeUpdateTimeSlot.BookerId = bookerId;
        timeUpdateTimeSlot.RoomId = ThisRoomId;
        await _http.PutAsJsonAsync($"https://localhost:44315/api/v1/TimeSlot/Update?id={timeUpdateTimeSlot.ID}", timeUpdateTimeSlot);

        await RefreshDb();
    }

    // Init empty room
    private async Task InitRoom()
    {
        var room = new Room
        {
            ID = ThisRoomId,
            Name = "Init Room",
            Placement = 1,
            CreatedUTC = _dtToday
        };

        await _http.PostAsJsonAsync("https://localhost:44315/api/v1/Room", room);
    }

    private async Task InitBooker()
    {
        var booker = new Booker()
        {
            ID = Guid.Empty,
            Name = "Joe Dull",

        };
        await _http.PostAsJsonAsync("https://localhost:44315/api/v1/Booker", booker);

    }

    private async Task InitDailySchedule()
    {
        TimeSpan duration = new TimeSpan(0, 0, 15, 0);
        DateTime initDate = new DateTime(_dtToday.Year, _dtToday.Month, _dtToday.Day, 6, 0, 0);

        for (var i = 0; i < 60; i++)
        {
            var timeSlot = new TimeSlot
            {
                ID = Guid.NewGuid(),
                TimeSlotStart = initDate,
                TimeSlotEnd = initDate.Add(duration),
                Title = "Vacant",
                IsVacant = true,
                BookerId = Guid.Empty,
                CreatedUTC = _dtToday,
                RoomId = ThisRoomId
            };

            await _http.PostAsJsonAsync("https://localhost:44315/api/v1/TimeSlot", timeSlot);

            initDate = initDate.Add(duration);
        }

        //await RefreshDb();

    }

    //private async Task ShowRoomAndTimeSlots()
    //{
    //    _room = await _http.GetFromJsonAsync<Room>("https://localhost:44315/api/v1/Room/GetById/" + ThisRoomId);
    //}

    private void GotoRoom()
    {
        string navUri = "/rooms";
        NavigationManager.NavigateTo(navUri);
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        Logger.LogInformation("URL of new location: {Location}", e.Location);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

}