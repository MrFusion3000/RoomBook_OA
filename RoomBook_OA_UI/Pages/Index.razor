@page "/"
@page "/{ThisRoomId:guid}"

@using Application.Shared.DTO
@using Domain.Entities
@using System.Security.Claims
@using System.Text.Json
@using System.Text.Json.Serialization
@using Domain.Interfaces
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Logging
@using RoomBook_OA_UI.Helpers.Extensions
@using RoomBookApiClient;

@inject NavigationManager NavigationManager
@inject ILogger<Index> Logger
@inject HttpClient _http

@*@attribute [Authorize]*@


<h1>Room: @_room.Name | @_room.ID</h1>

@*<AuthorizeView Roles="Administrator">
        <Authorized>
            The user @context.User.FindFirst(ClaimTypes.Name)?.Value is authorized as: @context.User.FindFirst(ClaimTypes.Role)?.Value
        </Authorized>
        <NotAuthorized>
            The User is not authorized
        </NotAuthorized>
    </AuthorizeView>*@
<hr />
@*<h2>HasItems (From present time and forward): @HasItems</h2>*@
<br />

<div align="center">
@if (FirstVacantSlot != null)
    {
        <MudButton Variant="Variant.Filled" Color="Color.Default" @onclick="@(e => UpdateTimeSlot(@FirstVacantSlot, "InstaBooked", InstaBookerGuid))">InstaBook&trade; @FirstVacantSlot.TimeSlotStart.ToShortDateString() @FirstVacantSlot.TimeSlotStart.ToLocalTime().ToShortTimeString() - @FirstVacantSlot.TimeSlotEnd.ToLocalTime().ToShortTimeString()</MudButton>
        @if (_selectedItem != null)
        {
            @if(_selectedItem.IsVacant == true)
            {
                //Vacant timeslot for IB+
                <MudButton Variant="Variant.Filled" Color="Color.Success" @onclick="@(e => UpdateTimeSlot(@_selectedItem, "InstaBooked+", InstaBookerGuid))">InstaBookPlus&trade; @_selectedItem?.TimeSlotStart.ToShortDateString() @_selectedItem?.TimeSlotStart.ToLocalTime().ToShortTimeString() - @_selectedItem?.TimeSlotEnd.ToLocalTime().ToShortTimeString()</MudButton>
            }
            else
            {
                //Alert message no vacant slot for IB+
                <MudAlert Severity="Severity.Warning">Timeslot is not vacant. Please choose other time to schedule.</MudAlert>

            }
        }


    }
</div>

@if (AnyVacantSlot < 1)
{
    <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined">Vacant slots all day.</MudAlert>
}

<MudTable Items="@currentTimeSlots" Dense="true" Hover="true" Bordered="true" Striped="true" FixedHeader="true" FixedFooter="true" @bind-SelectedItem="_selectedItem" RowsPerPage="12">
    <ToolBarContent>
        @*<MudText Typo="Typo.h6">Schedule for @_room.Name</MudText>*@
        <MudSpacer />
        @*<MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>*@
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Start</MudTh>
        <MudTh>End</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Booker</MudTh>
        <MudTh>Booking made</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.ID</MudTd>
        <MudTd DataLabel="Start">@context.TimeSlotStart.ToLocalTime().ToShortTimeString()</MudTd>
        <MudTd DataLabel="End">@context.TimeSlotEnd.ToLocalTime().ToShortTimeString()</MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Booker">@context.Booker.Name</MudTd>  
        <MudTd DataLabel="Updated">@context.UpdatedUTC</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 12, 24, 36, 48, 60 }" />
    </PagerContent>
</MudTable>
<div class="d-flex flex-wrap mt-4">

    <MudSpacer />
    <MudText Inline="true" Class="align-self-center" Style="min-width:200px;">Selected: @_selectedItem?.TimeSlotStart.ToLocalTime().ToShortTimeString() - @_selectedItem?.TimeSlotEnd.ToLocalTime().ToShortTimeString() : @_selectedItem?.Title</MudText>
    <MudSpacer />

    </div>

<hr />

<MudButton Variant="Variant.Filled" @onclick="NavigateToRoomsPage">RoomPicker</MudButton>

@*<MudGrid>
        <MudItem xs="12" sm="6" md="3">
            <MudTextField @bind-Value="newItemTitle" Label="Add Title" Variant="Variant.Outlined" Margin="Margin.Dense" Class="d-flex align-center justify-center mud-width-full py-8" />
        </MudItem>
        <MudItem xs="12" sm="3" md="3" Class="d-flex align-center justify-center mud-width-full py-8">
            <MudButton Variant="Variant.Filled" @onclick="@AddTimeSlot">Add</MudButton>
        </MudItem>
    </MudGrid>*@


@code {

    //temp room set
    [Parameter] public Guid InstaBookerGuid { get; set; } = Guid.Parse("99999999-9999-9999-9999-999999999999");

    private RoomDto _room = new();
    private List<TimeSlotDto> timeSlots;// = new();
    private List<TimeSlotDto> currentTimeSlots;

    [Parameter] public Guid ThisRoomId { get; set; }
    [Parameter] public int? HasItems { get; set; }
    [Parameter] public TimeSlotDto FirstVacantSlot { get; set; }
    [Parameter] public int AnyVacantSlot { get; set; }

    private string _searchString = "";
    private TimeSlotDto _selectedItem = null;
    private HashSet<TimeSlotDto> _selectedItems = new HashSet<TimeSlotDto>();

    public DateTime dtToday = DateTime.UtcNow;

    //private bool FilterFunc(ITimeSlot slot)
    //{
    //    if (string.IsNullOrWhiteSpace(_searchString))
    //        return true;

    //    if (slot.Title.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
    //        return true;

    //    return false;
    //}

    //Read TimeSlots from Db at start
    protected override async Task OnInitializedAsync()
    {
        // 1. Check if room exists
        // 2.a. if room exists check for timeslots
        //      2.a.1 if timeslots exists read those to list
        //      2.a.2 if timeslots doesn't exist create daily schedule
        // 2.b if room doesn't exists create room

        await RefreshDb();

        // TODO Change navigation order; Login/Admin page/Room admin/Choose Room/Display Room-TimeSlots
        // TODO Redirect to Rooms page to choose room
    }

    private async Task RefreshDb()
    {
        //Get current room and related Timeslots (from DateTime.Now and forward)
        //var showRoom = await _http.GetFromJsonAsync<RoomDto>("https://localhost:44315/api/v1/Room/GetByIdAndDateTime/" + ThisRoomId + "," + _dtToday);

        var roomClient = new RoomClient();

        var showRoom = await roomClient.GetRoomByIdAndDateTimeAsync(ThisRoomId, dtToday);
        //TODO Filter result after dtToday
        _room = showRoom;

        // CheckIfTimeSlotsExists
        if (!showRoom.TimeSlots.Any())
        {
            await InitDailySchedule();
        }

        timeSlots = showRoom.TimeSlots;
        currentTimeSlots = timeSlots.GetAllVacant(dtToday);

        HasItems = currentTimeSlots.Count;

        FirstVacantSlot = timeSlots.GetFirstVacant(dtToday);

        //Check if there are any vacant timeslots for the day
        AnyVacantSlot = timeSlots.Count(f => f.IsVacant);
    }

    //TODO Add check if timeSlot.isVacant = true else message to user
    private async Task UpdateTimeSlot(TimeSlotDto vacantSlot, string title, Guid bookerId)
    {
        var updateTimeSlot = new TimeSlotDto();
        updateTimeSlot.ID = (Guid)vacantSlot.ID;
        updateTimeSlot.TimeSlotStart = vacantSlot.TimeSlotStart;
        updateTimeSlot.TimeSlotEnd = vacantSlot.TimeSlotEnd;
        updateTimeSlot.IsVacant = false;
        updateTimeSlot.Title = title;
        updateTimeSlot.UpdatedUTC = DateTime.UtcNow;
        updateTimeSlot.BookerId = bookerId;
        await _http.PutAsJsonAsync($"https://localhost:44315/api/v1/TimeSlot/Update?id={updateTimeSlot.ID}", updateTimeSlot);

        await RefreshDb();
    }

    // Init empty room
    private async Task InitRoom()
    {
        var room = new Room
        {
            ID = ThisRoomId,
            Name = "Init Room",
            Placement = 1,
            CreatedUTC = dtToday
        };

        await _http.PostAsJsonAsync("https://localhost:44315/api/v1/Room", room);
    }

    private async Task InitBooker()
    {
        var booker = new Booker()
        {
            ID = Guid.Empty,
            Name = "Joe Dull",
            CreatedUTC = DateTime.Now
        };
        await _http.PostAsJsonAsync("https://localhost:44315/api/v1/Booker", booker);
    }

    private async Task InitDailySchedule()
    {
        TimeSpan duration = new TimeSpan(0, 0, 15, 0);
        DateTime initDate = new DateTime(dtToday.Year, dtToday.Month, dtToday.Day, 6, 0, 0);

        for (var i = 0; i < 60; i++)
        {
            var timeSlot = new TimeSlot
            {
                ID = Guid.NewGuid(),
                TimeSlotStart = initDate,
                TimeSlotEnd = initDate.Add(duration),
                Title = "Vacant",
                IsVacant = true,
                CreatedUTC = dtToday,
                RoomId = ThisRoomId,
                BookerId = Guid.Empty,
            };

            await _http.PostAsJsonAsync("https://localhost:44315/api/v1/TimeSlot", timeSlot);

            initDate = initDate.Add(duration);
        }
    }

    private void GotoRoom(Guid roomId)
    { 
            string navUri = "/" + roomId;
            NavigationManager.NavigateTo(navUri);
    }

    private void NavigateToRoomsPage()
    {
        NavigationManager.NavigateTo("rooms");

    }
    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        Logger.LogInformation("URL of new location: {Location}", e.Location);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

}