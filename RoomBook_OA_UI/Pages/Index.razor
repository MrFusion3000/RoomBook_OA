@page "/"
@using Domain.Entities
@using System.Security.Claims
@using Domain.Interfaces
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@inject HttpClient _http

@*<AuthorizeView Roles="Administrator">
    <Authorized>
        The user @context.User.FindFirst(ClaimTypes.Name)?.Value is authorized as: @context.User.FindFirst(ClaimTypes.Role)?.Value
    </Authorized>
    <NotAuthorized>
        The User is not authorized
    </NotAuthorized>
</AuthorizeView>*@
<hr/>

@if (FirstVacantSlot != null)
    {
<MudButton Variant="Variant.Filled" Color="Color.Default" @onclick="@(e => UpdateTimeSlot(FirstVacantSlot, false, "InstaBooked", 999))">InstaBook&trade; @FirstVacantSlot.TimeSlotStart.ToShortDateString() @FirstVacantSlot.TimeSlotStart.ToLocalTime().ToShortTimeString() - @FirstVacantSlot.TimeSlotEnd.ToLocalTime().ToShortTimeString()</MudButton>
    }


@if (AnyVacantSlot < 1 )
{
    <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined">Vacant slots all day.</MudAlert>
}

<MudTable Items="@_timeSlots" Dense="true" Hover="true" Bordered="true" Striped="true" @bind-SelectedItem="_selectedItem" RowsPerPage="12">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Schedule</MudText>
        <MudToolBarSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Start</MudTh>
        <MudTh>End</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Booker</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.ID</MudTd>
        <MudTd DataLabel="Start">@context.TimeSlotStart.ToLocalTime().ToShortTimeString()</MudTd>
        <MudTd DataLabel="End">@context.TimeSlotEnd.ToLocalTime().ToShortTimeString()</MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Vacant">@context.BookerId</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 12, 24, 36, 48, 60 }" />
    </PagerContent>
</MudTable>
<div class="d-flex flex-wrap mt-4">

    <MudToolBarSpacer />
    <MudText Inline="true" Class="align-self-center" Style="min-width:200px;">Selected: @_selectedItem?.TimeSlotStart.ToLocalTime().ToShortTimeString() - @_selectedItem?.TimeSlotEnd.ToLocalTime().ToShortTimeString() : @_selectedItem?.Title</MudText>
</div>

<hr />

@*<MudGrid>
    <MudItem xs="12" sm="6" md="3">
        <MudTextField @bind-Value="newItemTitle" Label="Add Title" Variant="Variant.Outlined" Margin="Margin.Dense" Class="d-flex align-center justify-center mud-width-full py-8" />
    </MudItem>
    <MudItem xs="12" sm="3" md="3" Class="d-flex align-center justify-center mud-width-full py-8">
        <MudButton Variant="Variant.Filled" @onclick="@AddTimeSlot">Add</MudButton>
    </MudItem>
</MudGrid>*@


@code {

    //private string newItemTitle;

    private IList<TimeSlot> _timeSlots = new List<TimeSlot>();
    //private IList<TimeSlot> timeSlotsTemp = new List<TimeSlot>();

    [Parameter] public int HasItems { get; set; }
    [Parameter] public TimeSlot FirstVacantSlot { get; set; }
    [Parameter] public int AnyVacantSlot { get; set; }

    private string _searchString = "";
    private TimeSlot _selectedItem = null;
    //private HashSet<TimeSlot> _selectedItems = new HashSet<TimeSlot>();

    public DateTime DtToday = DateTime.UtcNow;

    private bool FilterFunc(ITimeSlot slot)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (slot.Title.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    //Read TimeSlots from Db at start
    protected override async Task OnInitializedAsync()
    {
        await RefreshDb();

        // Add check for isVacant = null, to display no scheduled meetings all day
        HasItems = _timeSlots.Count;

    // Create empty Timeslots if none for the day
        if (HasItems == 0)
        {
            await InitDailySchedule();
        }

        //_firstVacantSlot = _timeSlots.FirstOrDefault(f => f.IsVacant);
    }

    //private async Task AddTimeSlot()
    //{
    //var addTimeSlot = new TimeSlot { TimeSlotStart = DateTime.Now, TimeSlotEnd = DateTime.Now.AddMinutes(15), Title = newItemTitle, IsVacant = false, BookerId = 999, CreatedUTC = DateTime.UtcNow };
    //var addTimeSlot = new TimeSlot { TimeSlotStart = dtToday, TimeSlotEnd = dtToday.AddMinutes(15), Title = newItemTitle, IsVacant = false, BookerId = 999, CreatedUTC = DateTime.UtcNow };

    //await Http.PostAsJsonAsync("https://localhost:44315/api/v1/TimeSlot", addTimeSlot);

    //Testing localhost server IIS
    //var addTimeSlot = new TimeSlot { TimeSlotStart = DateTime.Now, TimeSlotEnd = DateTime.Now.AddMinutes(15), Title = newItemTitle, IsVacant = false, BookerId = 1, CreatedUTC = DateTime.Now };
    //await Http.PostAsJsonAsync("https://localhost:81/api/v1/TimeSlot", addTimeSlot);

    //newItemTitle = "";

    //await RefreshDb();
    //}

    //Add check if timeSlot.isVacant = true else message to user
    private async Task UpdateTimeSlot(TimeSlot firstVacantSlot, bool notVacantSlot, string title, int booker)
    {
        var timeUpdateTimeSlot = firstVacantSlot;
        timeUpdateTimeSlot.IsVacant = notVacantSlot;
        timeUpdateTimeSlot.Title = title;
        timeUpdateTimeSlot.BookerId = booker;
        await _http.PutAsJsonAsync($"https://localhost:44315/api/v1/TimeSlot/Update?id={timeUpdateTimeSlot.ID}", timeUpdateTimeSlot);

        await RefreshDb();
    }

    private async Task RefreshDb()
    {
        //DateTime dtToday = DateTime.UtcNow;
        _timeSlots = await _http.GetFromJsonAsync<List<TimeSlot>>("https://localhost:44315/api/v1/TimeSlot/GetAllTimeSlotsByDate/" + DtToday);

        FirstVacantSlot = _timeSlots.FirstOrDefault(f => f.IsVacant);
        AnyVacantSlot = _timeSlots.Count(f => f.IsVacant);

    // Testing localhost server IIS
    //_timeSlots = await Http.GetFromJsonAsync<List<TimeSlot>>("https://localhost:81/api/v1/TimeSlot");
    }

    // Init empty daily schedule
    private async Task InitDailySchedule()
    {
        TimeSpan duration = new TimeSpan(0, 0, 15, 0);
        DateTime initDate = new DateTime(DtToday.Year, DtToday.Month, DtToday.Day, 6, 0, 0);

        for (int i = 0; i < 60; i++)
        {
            var timeSlot = new TimeSlot();
            timeSlot.ID = Guid.NewGuid();
            timeSlot.TimeSlotStart = initDate;
            timeSlot.TimeSlotEnd = timeSlot.TimeSlotStart.Add(duration);
            timeSlot.Title = "Vacant";
            timeSlot.IsVacant = true;
            timeSlot.CreatedUTC = DtToday;

            await _http.PostAsJsonAsync("https://localhost:44315/api/v1/TimeSlot", timeSlot);

            initDate = initDate.Add(duration);
        }

        await RefreshDb();

    }

}